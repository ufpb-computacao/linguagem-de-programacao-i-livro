== Revisão

.Objetivos do capítulo
____
Ao final deste capítulo você deverá ser capaz de:

* Entender e relembrar os principais conceitos vistos na disciplina Introdução à Programação;

* Ser capaz de utilizar em programas em linguagem C estruturas de controle (estruturas de seleção 
ou decisão, estruturas de repetição);

* Ser capaz de elaborar programas em linguagem C que utilizem arrays (vetores, matrizes, etc.) e 
funções ou sub-rotinas.
____


A Informática é uma área que se caracteriza por sofrer transformações em um curto espaço 
de tempo. Isso, principalmente, em decorrência do surgimento e aprimoramento de novas tecnologias 
de hardware, de novas técnicas e paradigmas de desenvolvimento de software e do contínuo 
desenvolvimento de ferramentas e aplicativos para a Internet. Entretanto, mesmo com todo o avanço 
e rápidas mudanças, ainda é preciso ter profissionais com conhecimento em programação de 
computadores, tanto nos paradigmas mais tradicionais e em programação estruturada e orientada a 
objeto, quanto nos paradigmas mais modernos como o de programação concorrente. A porta de entrada para 
o mundo da programação de computadores ainda continua sendo o aprendizado da construção de 
*((algoritmos))*, pois aprender programação de computadores não significa aprender apenas a 
sintaxe de uma linguagem de programação, mas, principalmente, saber modelar um problema a ser 
resolvido em uma linguagem computacional. O ciclo de aprendizado se completa quando se usa uma 
linguagem de programação para exercitar e representar o problema modelado previamente e 
executá-lo em um computador.

Neste capítulo serão revisados os principais conceitos vistos na disciplina 'Introdução à 
Programação', no entanto, não é objetivo rever a definição de algoritmo e aspectos básicos de 
programação, já que entende-se que estes tópicos já foram abordados na referida disciplina.

=== Algoritmos computacionais

(((Algoritmos)))

Na resolução de problemas através de computadores, a tarefa desempenhada por eles é 
apenas parte do processo de solução. Há outras etapas que não são realizadas 
pelos computadores. As etapas na solução de problemas são: 

i) Entendimento do problema (realizada por pessoas);

ii) Criação de uma sequência de operações (ou ações) que, quando executadas, produzem a 
solução para o problema e a tradução para uma linguagem de programação (realizada por pessoas);

iii) Execução dessa sequência de operações (realizada pelo computador);

iv) Verificação da adequação da solução (realizada por pessoas).

A etapa (i) é fundamental para que o programador saiba exatamente o que deve ser resolvido, quais 
são os requisitos do problema, necessidades do cliente interessado na solução, dentre outras 
coisas.

Na etapa (ii) é feita a modelagem do problema em uma linguagem computacional, ou seja, é 
desenvolvido o algoritmo, e, em seguida, é feita a tradução do algoritmo para uma linguagem de 
programação que seja mais apropriada ao problema. Neste ponto, pode-se perguntar qual a melhor 
linguagem de programação? A resposta para essa pergunta é direta. Não existe uma linguagem de 
programação que seja a melhor para todos os tipos de problemas. A escolha da linguagem 
depende da natureza do problema, logo, pode-se usar C ou C++ em uma situação e Java 
em outra, e assim por diante. Com o tempo, o aluno vai ganhando conhecimento e maturidade e será 
capaz de saber qual paradigma de programação (estruturado, orientado a objeto, recorrente, ...) 
é mais adequado e qual linguagem de programação pertencente ao paradigma escolhido é mais 
apropriada. Nas disciplinas 'Introdução à Programação' e 'Linguagem de Programação I' será 
estudado o paradigma de programação estruturada. Exemplos de linguagens de programação 
pertencentes a este paradigma são C, Fortran e Pascal.

Na etapa (iii) o algoritmo e/ou programa de computador desenvolvido na etapa anterior é executado em 
um computador gerando uma resposta ou solução para o problema.

A resolução do problema não acaba após a execução do programa pelo computador. É preciso 
avaliar e analisar com calma se a solução encontrada é viável ou correta. É muito comum a 
ocorrência de erros na modelagem/entendimento do problema na etapa (i) ou na construção do 
algoritmo ou programa na etapa (ii). Esses erros gerarão como consequência uma solução que não 
está correta. Caso isso aconteça, é preciso rever as etapas (i) e (ii) com cuidado para que os 
erros sejam encontrados até que a solução obtida na etapa (iii) passe a ser correta.

Finalmente, perceba que das quatro etapas, apenas um delas é executada por um computador. Note 
também que a resolução de problemas através de computadores não inicia com a construção 
direta do programa ou código em uma linguagem de programação. É preciso antes entender e 
modelar o problema.



=== A linguagem de programação C

O 'C' nasceu na década de 1970 e teve como inventor Dennis Ritchie no AT&T Bell Labs. Ele é 
derivado de uma outra linguagem: o 'B', criado por Ken Thompson. O 'B', por sua vez, veio da linguagem 
BCPL, inventada por Martin Richards. 'C' é uma linguagem de programação genérica que é 
utilizada para a criação de programas diversos como processadores de texto, planilhas 
eletrônicas, programas para a automação industrial, sistemas operacionais, implementação de 
protocolos de comunicação, gerenciadores de bancos de dados, programas de projeto assistido por 
computador, programas para a solução de problemas da Engenharia, Física, Química e outras 
Ciências.

C é uma linguagem 'Case Sensitive', isto é, 'letras maiúsculas e minúsculas fazem diferença'. Se 
declararmos uma variável com o nome `soma` ela será diferente de `Soma`, `SOMA`, `SoMa` ou `sOmA`. 
Da mesma maneira, os comandos do C `if` e `for`, por exemplo, só podem ser escritos em minúsculas, 
caso contrário, o compilador não irá interpretá-los como sendo comandos, mas sim como variáveis ou 
outra estrutura do programa. 

Existe um conjunto de palavras que são reservadas da linguagem e 
usadas para representar comandos de controle do programa, operadores e diretivas ou 
bibliotecas. A <<tab_palavras_reservadas_c>> mostra palavras que são reservadas na linguagem C.

[[tab_palavras_reservadas_c]]
.Palavras reservadas em C
[width="85%",cols="^s,^s,^s,^s"]
|====
| `auto`| `double`| `int`| `struct`
| `break`| `else`| `long`| `switch`
| `case`| `enum` | `register` | `typedef`
| `char`| `extern` | `return` | `union`
| `const` | `float`| `short`| `unsigned`
| `continue`| `for`| `signed`| `void`
| `default`| `goto`| `sizeof`| `volatile`
| `do`| `if`| `static`| `while`
|====


Programas em C têm estrutura flexível. É possível escrever programas desorganizados que 
funcionam, porém, esses programas são ilegíveis e de difícil correção. Por esse motivo, é 
fundamental aprender e utilizar os conceitos e potencialidades da programação estruturada que 
serão abordados nesta disciplina e na disciplina 'Introdução à Programação'.

=== Estruturas de dados e estruturas de controle

Um programa de computador contém basicamente dois tipos de estruturas, a saber, as estruturas de 
dados e as estruturas de controle.

As ((estruturas de dados)) podem ser entendidas como estruturas que são utilizadas para armazenar e/ou 
representar as informações (dados) que são úteis para a resolução ou entendimento do problema 
e serão utilizados nos programas e algoritmos. Basicamente, há dois tipos de estruturas de dados, 
a saber, estática e dinâmica. Pode-se entender como estruturas de dados estáticas: variáveis, 
'arrays' unidimensionais (também conhecidos como vetores), 'arrays' multidimensionais (também 
conhecidos como matrizes de duas, três ou mais dimensões), registros (também conhecidos como 
estruturas ou tipos estruturados) e arquivos. São classificadas como estruturas de dados 
dinâmicas: filas, pilhas, listas encadeadas, árvores e tabelas de dispersão. As estruturas de 
dados estáticas são abordadas neste livro, enquanto que as estruturas de dados dinâmicas serão 
abordadas na disciplina 'Estrutura de Dados'.

As estruturas de controle são utilizadas para manipular e controlar as estruturas de dados vistas 
no parágrafo anterior, ou seja, controlar o fluxo de informação, e também para controlar as 
tomadas de decisão dentro de um programa ou algoritmo. Podem ser divididas em três tipos: 
estruturas sequenciais, estruturas de seleção ou condicionais, e estruturas de repetição.


==== Declaração de variáveis em C

(((Tipos de dados)))

A linguagem C possui cincos tipos básicos que podem ser usados na declaração das ((variáveis)), a 
saber, `int`, `float`, `double`, `void` e `char`. A partir desses tipos são utilizadas 
palavras-chaves para qualificar outras variáveis. São elas: 

i) `short` ou `long`, que se referem ao tamanho ou espaço de representação numérica da variável;

ii) `signed` ou `unsigned`, que se referem ao tipo definido com ou sem sinal, respectivamente.

// FIXME Tabela em bits e parágrafo em bytes.

A <<tab_tipo_de_dados>> mostra os tipos de dados com suas variantes, a faixa de valores numéricos que pode 
representar, o formato para uso nos comandos `printf` e `scanf`, e o tamanho em bytes usado para 
armazenamento na memória. Os bytes são armazenados de forma contínua na memória. O código a 
seguir ajuda a calcular os 's' bytes usados como tamanho das variáveis que cada computador utiliza 
para armazenar na memória. Para o inteiro, por exemplo, dependendo do computador pode-se usar 16 
ou 32 bits (ou 8*s na <<tab_tipo_de_dados>>).

[[tab_tipo_de_dados]]
.Tipos de dados em C.
[width="100%",cols="^2m,^2,^1m,^1",frame="topbot",options="header"]
|====
| Tipo|Faixa de valores|Formatofootnote:[Para uso nos comandos printf e scanf.]|Tamanho em bits (aproximado)
| char|-128 a +127|%c|8
| unsigned char|0 a +255|%c|8
| signed char|-128 a + 127|%c|8
| int|-2^8s-1^  a +2^8s-1^  |%d|8*s 
| unsigned int|0 a (2^8s - 1^) |%d|8*s
| signed int|-2^8s-1^  a +2^8s-1^ |%d|8*s
| short int |-32.768 a +32.767|%hd|16
| unsigned short int|0 a 65.535|%hu|16
| signed short int|0 a 65.535|%hd|16
| long int|-2.147.483.648 a +2.147.483.647|%ld|32
| signed long int|-2.147.483.648 a +2.147.483.647|%lu|32
| unsigned long int|0 a + 4.294.967.295|%lu|32
| float |3,4E-38 a + 3,4E+38|%f|32
| double|1,7E-308 a 1,7E+308|%lf|64
| long double|3,4E-4932 a 3,4E+4932|%lf|80
|====

.Código fonte
{gitrepo}/blob/master/livro/capitulos/code/cap1/tamando_dos_tipos.c[code/cap1/tamando_dos_tipos.c]

[source, c]
.Programa para demonstrar os tamanhos dos tipos
----
include::code/cap1/tamando_dos_tipos.c[]
----

.Saída da execução do programa
....
include::code/cap1/tamando_dos_tipos.out[]
....

==== Estruturas de controle sequenciais e de decisão

As estruturas sequenciais são as mais simples e se caracterizam por serem sequências ordenadas de 
comandos que são executados da maneira como aparecem e sem desvios de execução, a não ser que 
exista algum comando específico que cause um desvio de execução. O Quadro 1.1 <<quadro_sintaxe_estrutura_controle_sequencial>> ilustra a sintaxe 
geral de estruturas sequenciais.

Dependendo do problema em análise, talvez seja preciso seguir caminhos diferentes dependendo do 
teste de uma condição. As estruturas de seleção ou decisão permitem que um grupo de comandos 
seja executado de acordo com a aceitação ou não de certas condições. Uma condição lógica 
(boolena) é testada e, dependendo do resultado (*verdadeiro* ou *falso*), um determinado caminho 
é seguido dentro do programa. Pode-se ter dois tipos de estrutura de decisão, a saber, decisão 
simples e decisão múltipla. O Quadro 1.2 <<quadro_sintaxe_estrutura_controle_seleção_simples>> apresenta a sintaxe geral da estrutura de controle de 
seleção simples. Na opção 1, tem-se o teste da 'condição' e, caso seja *verdadeira*, o bloco 
de comando 1 é executado. Caso seja *falsa*, serão executados os comandos após o fechamento da 
chave. Na opção 2, tem-se o teste da 'condição' e, caso seja *verdadeira*, o bloco de comando 1 
é executado, caso contrário, o bloco de comando 2 é executado. Note que os blocos de comandos 
são separados por chaves.




[[sintaxe_estrutura_controle_sequencial]]
.Sintaxe geral da estrutura de controle sequencial
****
 Comando1;
 Comando2;
 Comando3;
 ...
****

[[sintaxe_estrutura_controle_seleção_simples]]
.Sintaxe geral da estrutura de controle de seleção simples
****
Opção 1:

[source, c]
----
 if (condição){
    // bloco de comandos 1;
 }
----

Opção 2:

[source, c]
----
 if (condição){
    // bloco de comandos 1;
 } 
 else {
    // bloco de comandos 2;
 }
----

****

Há problemas em que é preciso testar várias condições (como pode ser visto em <<bloco_sintaxe_geral>>). O 
funcionamento da estrutura composta é simular ao da seleção simples. Caso a _condição 1_ seja 
verdadeira, executa-se o *bloco de comandos 1*; *senão* (`else`) a _condição 2_ é testada e, se for verdadeira, 
executa-se o *bloco de comandos 2*; e assim por diante, até ser testada a última condição.

IMPORTANT: Sempre que você precisar executar um bloco de instruções, utilize as chaves para 
delimitar o início e o fim deste bloco.


[[bloco_sintaxe_geral]]
.Sintaxe geral da estrutura de seleção composta
****
[source, c]
----
 if (condição1) {
    // bloco de comandos 1;
 } 
 else if (condição2) {
    // bloco de comandos 2;
 }
 else if (condição3) {
    // bloco de comandos 3;
 }

 // ...

 else if (condiçãoN) {
    // bloco de comandos N;
 }

 else {
   // bloco de comando default;
 }

----

****

IMPORTANT: O bloco de comandos `default` pode ser utilizado para dar uma mensagem de alerta ao 
usuário dizendo que todas as condições foram testadas e nenhuma delas foi *verdadeira*.



==== Estruturas de repetição

Uma estrutura de repetição é utilizada quando se deseja repetir um trecho do programa ou até 
mesmo o programa inteiro. O número de repetições pode ser um número fixo ou estar relacionado a 
uma condição definida pelo programador. Dessa maneira, há três tipos de estruturas de 
repetição que podem ser utilizadas para cada situação.

===== Estrutura de repetição para um número definido de repetições (estrutura 'for')

É utilizada quando se sabe o número de vezes que um trecho do programa deve ser repetido. Esta 
estrutura é chamada em linguagem C de `for`. A sintaxe geral do comando `for` pode ser vista
a seguir:

[source, c]
.Sintaxe geral da estrutura de repetição for
----
for(i=valor inicial; condição de parada; incremento/decremento de i){
  // bloco de comandos
}
----


A primeira parte atribui um valor inicial à variável i, que é chamada de contador e tem a função 
de controlar o número necessário de repetições. A 'condição de parada' é utilizada como 
critério para se saber quando deve-se parar o comando de repetição. Quando essa condição 
assumir o valor *falso*, o comando `for` será encerrado. A terceira parte é o 'incremento' ou 
'decremento' do contador `i` e tem a função de alterar o valor do contador i até que a condição 
de parada assuma valor *falso*.

[source, c]
.Exemplo do comando 'for'
----
for (j=0; j<10; j++){
    // bloco de comandos;
}
----

Nesse exemplo é inicialmente atribuído o valor `0` ao contador, variável `j`, e depois vai sendo 
*incrementado* em uma unidade. A cada valor de `j`, o 'bloco de comandos' é executado. Este processo 
se repete até que o valor do contador `j` se torne maior ou igual a `10`, fazendo com que a 
condição `j<10` assuma o valor *falso*. Perceba que nesse exemplo o 'bloco de comandos' será 
executado 10 vezes.

===== Estrutura de repetição para um número indefinido de repetições (estrutura 'while')

A estrutura de repetição `while` é utilizada principalmente quando o número de repetições 
não é conhecido pelo programador. O Quadro 1.3 <<quadro_sintaxe_estrutura_repetição_while>> mostra a sua sintaxe geral. Nessa estrutura, o 
'bloco de comando' é repetido enquanto a 'condição' for verdadeira e a 'condição de parada' é 
testada logo no início do comando `while`, assim, caso ela seja falsa, o bloco de comandos não é 
executado. O `while` pode também ser utilizado em situações em que se conhece o número de 
repetições.

[[sintaxe_estrutura_repetição_while]]
[source,c]
.Sintaxe geral da estrutura de repetição 'while'
----
while(condição){
    // bloco de comandos;
}
----

.Código fonte
{gitrepo}/blob/master/livro/capitulos/code/cap1/while_exemplo.c[code/cap1/while_exemplo.c]

[source,c]
.Uso do 'while'
----
int z=0;
while (z<=3) {
	printf("Continuo repetindo o comando.\n");
	z++;
}
----

IMPORTANT: Note que o incremento do contador (`z++`) do exemplo anterior é último comando do `while`.


===== Estrutura de repetição para um número indefinido de repetições e teste no final da estrutura (estrutura 'do-while')

Assim como a estrutura `while`, a estrutura `do-while` é utilizada principalmente quando o número 
de repetições não é conhecido pelo programador, a diferença é que a 'condição de parada' é 
testada no final da estrutura, portanto, o bloco de comandos 3 no Quadro 1.4 <<quadro_sintaxe_estrutura_repetição_dowhile>> é executado pelo 
menos uma vez. Assim, o menu é exibido na tela a primeira vez e, caso o usuário digite uma 
opção diferente de 1, 2 ou 3, o comando é repetido. Perceba que nesse caso o `do-while` 
terminará somente quando o usuário escolher uma das opções 1, 2 ou 3.

[[sintaxe_estrutura_repetição_dowhile]]
[source, c]
.Sintaxe geral da estrutura de repetição `do-while`
----
do {
    // bloco de comandos
} while (condição);
----

.Código fonte
{gitrepo}/blob/master/livro/capitulos/code/cap1/do_while_exemplo.c[code/cap1/do_while_exemplo.c]

[source, c]
.Exemplo do do-while 
----
do{
    printf ("\n Escolha a fruta pelo numero: \n");
    printf ("\t(1)...Mamao\n");
    printf ("\t(2)...Abacaxi\n");
    printf ("\t(3)...Laranja\n");
    scanf("%d", &i);
} while ((i<1) || (i>3));
----

==== Arrays em C

Um array em C pode ser entendido como uma estrutura de dados composta homogênea, ou seja, é capaz 
de armazenar um conjunto de dados do mesmo tipo (inteiros ou reais), que possuem o mesmo 
identificador (nome) e são alocados de forma contínua na memória. Podem ser de dois tipos, 
unidimensionais (também chamados de vetores) ou multidimensionais (também chamados de matrizes de 
n-dimensões).

===== Arrays unidimensionais ou vetores

Para se declarar um vetor em C, usa-se colchetes logo após o nome dado ao vetor e, dentro dos 
colchetes, a quantidade de posições do vetor. A <<fig_vetor>> mostra um exemplo de definição de 
vetor. Note que é preciso também definir o tipo de dado que o vetor irá armazenar (`float`, 
`double`, `int`, etc.). Neste exemplo foi definido um vetor de `float` com nome `vet` e com tamanho 
de oito posições, é dado também um exemplo de preenchimento do vetor. Serão então alocados na 
memória RAM um espaço com `8*sizeof(float)` bytes para armazenamento deste vetor.

[[fig_vetor]]
.Exemplo de definição de um vetor
image::images/cap1-revisao/vertor8.png[scaledwidth="60%"]

As operações básicas que se pode fazer com vetores são: atribuir valores a posições dos 
vetores, preencher por completo o vetor e mostrar ou imprimir os valores armazenados no vetor.

Para atribuir um valor a uma posição do vetor basta fazer:

[source,c]
----
vet[0]= 3.4; // atribui o valor 3.4 a primeira posição do vetor vet
vet[6]= 0.0; // atribui o valor 0.0 a sétima posição do vetor vet
soma[4]= 28.9; // atribui o valor 28.9 a quinta posição do vetor soma
----


O preenchimento ou impressão completa de um vetor é sempre feito usando-se um comando de 
repetição para acessá-lo. Em geral, usa-se o comando `for` já que se conhece o tamanho do 
vetor e, portanto, quantas vezes os comandos serão repetidos. O preenchimento de um vetor como o 
da <<fig_vetor>> pode ser feito com um código como:

[source,c]
----
for(i=0; i<7; i++){
  printf("Digite o valor a ser preenchido em vet[%d]. \n", i+1);
  scanf("%f", &vet[i]); // grava o valor digitado na i-ésima posição
}
----


A impressão dos valores armazenados pode ser feita com um código como:

[source,c]
----
printf("Os valores armazenados no vetor vet são: \n");
for(i=0; i<7; i++){
    printf("%0.2f ", vet[i]);
}
----


É possível também definir e preencher vetores diretamente da seguinte forma:

[source,c]
----
float notas[6] = {1.3, 4.5, 2.7, 4.1, 0.0, 100.1};
----

===== Arrays bidimensionais ou multidimensionais

Um array multidimensional pode ser definido de maneira similar a um vetor, a diferença é que 
deve-se utilizar um índice para cada dimensão. No caso de vetores foi utilizado apenas um índice 
por que o vetor possui apenas uma dimensão. A sintaxe geral é então:

----
tipo-de-dado  nome_do_array [dimensão1][dimensão2]...[dimensãoD];
----

em que:

`tipo-de-dado`:: corresponde ao tipo de dado (`int`, `float`, `double`, ...) a ser armazenado na 
matriz;

`nome_do_array`:: é o identificador ou nome dado à matriz;

`[dimensão1]`:: é o tamanho da primeira dimensão da matriz; 

`[dimensão2]`:: é o tamanho da segunda dimensão da matriz;

`[dimensãoD]`:: é o tamanho da D-ésima dimensão da matriz;

Em geral usam-se matrizes com duas dimensões, as quais recebem os nomes de linhas e colunas da 
matriz. A <<fig_matriz>> mostra um exemplo de como definir uma matriz com 3 linhas e 4 colunas para 
armazenar números do tipo `double`.

[[fig_matriz]]
.Exemplo de definição de um array bidimensional ou matriz
image::images/cap1-revisao/matriz.png[scaledwidth="40%"]


As operações básicas que se pode fazer com matrizes são: atribuir valores a posições das 
matrizes, preencher por completo a matriz e mostrar ou imprimir os valores armazenados na matriz.

Para atribuir um valor a uma posição da matriz basta fazer:

[source,c]
----
// atribui o valor 0.5 a primeira posição de matriz
matriz[0][0]= 0.5;
// atribui o valor 104 a posição linha 2, coluna 3 de matriz
matriz[2][3]= 104; 
----


O preenchimento ou impressão completa de um array é sempre feito usando-se comandos de 
repetição para acessar as dimensões do array. Para cada dimensão usa-se um comando de 
repetição que, em geral, é o comando `for`. O preenchimento de uma matriz de duas dimensões como 
a da <<fig_matriz>> pode ser feito com um código como:

[source,c]
----
for(i=0; i<3; i++){
  for(j=0; j<4; i++){
    printf("Digite o valor a ser preenchido em matriz[%d,%d].\n",i,j);
    scanf("%lf", &matriz[i,j]); // grava na linha i coluna j
  }
}
----

A impressão dos valores armazenados pode ser feita com um código como:

[source,c]
----
printf("Os valores armazenados em matriz são: \n");
for (i=0;i<3;i++){
  for (j=0;j<4;j++){
    printf (" %lf",matriz[i][j]);
  }
  printf ("\n\n");
}
----


Observe que nos códigos do preenchimento e impressão da matriz `matriz` foram utilizados dois 
comandos de repetição, já que ela é bidimensional.


NOTE: Registros ou estruturas em C e arquivos serão abordados no <<cap_registros>>.

=== Estrutura geral de um programa em C

Um programa em C pode ter uma estrutura geral como aparece a seguir:

[source,c,numbered]
----
/* Comentários gerais explicando o que o programa faz . */
Diretivas de pré-compilação (include, define, uso de < > e " ")
Declarações globais
Definição de protótipo de funções ou sub-rotinas usadas no programa

int main() {
  comandos contidos na função main; // comentários
  return 0;
} // fim da função main
----


A linha 2 representa a inclusão das bibliotecas da linguagem, como `stdio.h`, `stdlib.h`, 
`math.h`, dentre outras, ou bibliotecas criadas pelo próprio programador. A linha 3 representa a 
definição de declarações globais, como por exemplo, variáveis globais do programa. Em seguida, 
podem ser incluídos os protótipos das funções ou sub-rotinas criadas pelo programador e que 
serão utilizadas no programa. A linha 6 representa o início da função `main` do programa C com 
os seus comandos delimitados pelas chaves `{ ... }`. Finalmente, após a função `main`, são 
incluídos os códigos das funções ou sub-rotinas definidas na linha 4 e utilizadas no programa.

Embora seja simples, essa estrutura geral de um programa em C pode ser utilizada pelo estudante ou 
programador iniciante para não esquecer partes fundamentais que um programa em C deve conter. 
Pode-se acrescentar ainda no início do programa (linha 1) um comentário geral explicando o que 
ele faz, qual seu objetivo, que tipo de entrada precisa, que tipo de saída irá gerar, 
etc.

// Sempre terminar o arquivo com uma nova linha.


